# Oh-my-zsh stuff
ZSH=$HOME/.oh-my-zsh
ZSH_THEME="blinks"
plugins=(git tmuxinator npm grunt gulp vagrant yarn)
source $ZSH/oh-my-zsh.sh

export EDITOR=vim
export SHELL_CONFIG=$HOME/.dotfiles/
export PYTHONPATH=$(brew --prefix)/lib/python2.7/site-packages:$PYTHONPATH


# use .localrc for SUPER SECRET CRAP that you don't
# want in your public, versioned repo.
if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi

# all of our zsh files
typeset -U config_files
config_files=($SHELL_CONFIG/**/*.zsh)

# load the path files
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source $file
done

# initialize autocomplete here, otherwise functions won't be loaded
autoload -U compinit
compinit

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done

unset config_files
export PATH="$(brew --prefix homebrew/php/php56)/bin:$(npm root -g):$HOME/bin:$HOME/.rbenv/bin:$PATH"
# export PKG_CONFIG_PATH="/opt/X11/lib/pkgconfig"
export NODE_PATH="'$(npm root -g)'"
eval "$(rbenv init -)"
export RBENV_ROOT=/usr/local/var/rbenv
### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"
export PATH="$(brew --prefix homebrew/php/php56)/bin:$PATH"

# Send notifications to pushover.
function push {
    curl -s -F "token=aUv7GRULtGpQRhGWLmGKGJ3bRk8eZ6" \
    -F "user=u3aGH3oB8UPbeuqWzVyLyA4wQmiFZh" \
    -F "title=Job" \
    -F "message=$1" https://api.pushover.net/1/messages.json
}

autoload bashcompinit
bashcompinit

function rvm () {
  if [[ $1 == 'use' ]]; then
    rbenv shell $2
  fi
}
export PATH="/usr/local/sbin:$PATH"
export PATH="$HOME/.composer/vendor/bin:$PATH"

export NVM_DIR="/Users/tlattimore/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm

export LESSOPEN="| /usr/local/bin/src-hilite-lesspipe.sh %s"
export LESS=' -R '

change () {
        from=$1
        shift
        to=$1
        shift
        for file in $*
        do
                perl -i.bak -p -e "s{$from}{$to}g;" $file
                echo "Changing $from to $to in $file"
        done
}
