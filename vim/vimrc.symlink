set nocompatible              " be iMproved, required
filetype off                  " required

call plug#begin('~/.vim/plugged')
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
"
" Custom bundles
"
call plug#begin('~/.vim/plugged')
Plug 'junegunn/vim-plug' " So we can run :help plug-options
Plug 'kien/ctrlp.vim'
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'paranoida/vim-airlineish'
Plug 'airblade/vim-gitgutter'
Plug 'patstockwell/vim-monokai-tasty'
Plug 'ConradIrwin/vim-bracketed-paste'
Plug 'othree/yajs.vim'
Plug 'majutsushi/tagbar'
Plug 'editorconfig/editorconfig-vim'
Plug 'isRuslan/vim-es6'
Plug 'mileszs/ack.vim'
Plug 'pangloss/vim-javascript'
Plug 'w0rp/ale'
Plug 'editorconfig/editorconfig-vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'yuezk/vim-js'
Plug 'pangloss/vim-javascript'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'styled-components/vim-styled-components'
Plug 'eugen0329/vim-esearch'
call plug#end()

filetype plugin indent on    " required
colorscheme vim-monokai-tasty
syntax enable

set shell=/bin/bash
set background=dark
set clipboard=unnamed
set expandtab
set tabstop=2
set shiftwidth=2
set autoindent
set smartindent
set nocompatible
set nowrap
set number
set backspace=indent,eol,start
set nobackup
set noswapfile
set t_Co=256
set laststatus=2
set incsearch
set cursorline
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
set undofile
set undodir=$HOME/.vim/history
set undolevels=100
set undoreload=10000
set hidden
set linespace=0

let mapleader = "\<Space>"
let g:ackprg = 'ag --vimgrep'
let g:jsx_ext_required = 0
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\'
let g:netrw_banner = 0
let g:netrw_fastbrowse = 0
let g:ale_fixers = {
\   'javascript': ['prettier'],
\   'css': ['prettier'],
\}
let g:ale_linters_explicit = 1
let g:ale_fix_on_save = 1
let g:vim_jsx_pretty_colorful_config = 1
let g:vim_monokai_tasty_italic = 1

nnoremap <Leader>w :w<CR>
nnoremap <Leader>d :bd<CR>
nmap <F8> :TagbarToggle<CR>

" Previous and next buffers.
map <C-l> :bnext<CR>
map <C-h> :bprev<CR>

" Map :E to :Explore
command! -nargs=* -bar -bang -count=0 -complete=dir E Explore <args>

" Inherit the terminals background color.
hi Normal ctermbg=NONE
" No background behind line numbers
hi LineNr ctermfg=white ctermbg=236
" Comment Highlighting
hi Comment ctermbg=NONE
" No background on Signcolumn
hi SignColumn ctermfg=white ctermbg=236
" Git Gutter custom settings
hi GitGutterAdd ctermfg=green ctermbg=236
hi GitGutterChange ctermfg=lightblue ctermbg=236
hi GitGutterDelete ctermfg=red ctermbg=236
hi GitGutterChangeDelete ctermfg=lightblue ctermbg=236
" Highlight line color.
hi CursorLine ctermbg=236
hi CursorLineNR ctermbg=NONE ctermfg=white

" Disable Arrow keys
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" Set sign column to always be open.
set signcolumn=yes

" Enable powerline special fonts.
let g:airline_powerline_fonts = 1

" Turn on Vim Airline tabs.
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme = 'bubblegum'

" Send d and c to the blackhole.
nnoremap d "_d
vnoremap d "_d

" Shift+tab for command mode.
nmap <S-Tab> <<
" Shift+tab for insert mode.
imap <S-Tab> <Esc><<i
" Shift+tab for visual mode.
vmap <S-Tab> <<
" Wrap gitcommit file types at the appropriate length
filetype indent plugin on

" Markdown specific stuff.
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" Remove trailing whitespace on save.
autocmd BufWritePre * :%s/\s\+$//e

" Better relative line numbers
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc

nnoremap <C-n> :call NumberToggle()<cr>

let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
nnoremap <C-w>E :SyntasticCheck<CR> :SyntasticToggleMode<CR>

" Force saving files that require root permission
cnoremap w!! w !sudo tee > /dev/null %

" COC Config sourced from https://github.com/neoclide/coc.nvim/blob/master/Readme.md
" Better display for messages
set cmdheight=2
" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

let g:esearch#out#win#open = 'enew'
let g:esearch#adapter = 'ag'

