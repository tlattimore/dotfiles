set nocompatible              " be iMproved, required
filetype off                  " required
call plug#begin('~/.vim/plugged')
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
"
" Custom bundles
"
call plug#begin('~/.vim/plugged')
Plug 'junegunn/vim-plug' " So we can run :help plug-options
Plug 'kien/ctrlp.vim'
Plug 'tpope/vim-fugitive'
Plug 'cakebaker/scss-syntax.vim', {'for': 'scss'}
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'paranoida/vim-airlineish'
Plug 'airblade/vim-gitgutter'
Plug 'ap/vim-css-color'
Plug 'sickill/vim-monokai'
Plug 'junegunn/goyo.vim', {'for': 'markdown'}
Plug 'itspriddle/vim-marked', {'for': 'markdown'}
Plug 'tpope/vim-liquid'
Plug 'mxw/vim-jsx', {'for': 'jsx'}
Plug 'ConradIrwin/vim-bracketed-paste'
Plug 'davidoc/taskpaper.vim', {'for': 'taskpaper'}
Plug 'tpope/vim-surround'
Plug 'othree/yajs.vim'
Plug 'vim-scripts/SyntaxComplete'
Plug 'majutsushi/tagbar'
Plug 'editorconfig/editorconfig-vim'
Plug 'scrooloose/syntastic'
Plug 'lumiliet/vim-twig', {'for': 'twig'}
Plug 'isRuslan/vim-es6'
Plug 'mileszs/ack.vim'
Plug 'Valloric/YouCompleteMe'
Plug 'ternjs/tern_for_vim'
Plug 'pangloss/vim-javascript'
call plug#end()

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
let g:deoplete#enable_at_startup = 1

filetype plugin indent on    " required
syntax enable
colorscheme monokai
syntax enable
set shell=/bin/bash
set background=dark
set clipboard=unnamed
set expandtab
set tabstop=2
set shiftwidth=2
set autoindent
set smartindent
set nocompatible
set nowrap
set number
set backspace=indent,eol,start
set nobackup
set noswapfile
set t_Co=256
set laststatus=2
set incsearch
set cursorline
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
set undofile
set undodir=$HOME/.vim/history
set undolevels=100
set undoreload=10000
set hidden
set linespace=0
let mapleader = "\<Space>"
let g:ackprg = 'ag --vimgrep'
let g:jsx_ext_required = 0
nnoremap <Leader>w :w<CR>
nnoremap <Leader>d :bd<CR>
nmap <F8> :TagbarToggle<CR>

" Previous and next buffers.
map <C-l> :bnext<CR>
map <C-h> :bprev<CR>

" Map :E to :Explore
command! -nargs=* -bar -bang -count=0 -complete=dir E Explore <args>

" Inherit the terminals background color.
highlight Normal ctermbg=NONE

" No background behind line numbers
highlight LineNr ctermfg=white ctermbg=235
" Comment Highlighting
highlight Comment ctermbg=NONE
" No background on Signcolumn
highlight SignColumn ctermfg=white ctermbg=235
" Git Gutter custom settings
highlight GitGutterAdd ctermfg=green ctermbg=235
highlight GitGutterChange ctermfg=lightblue ctermbg=235
highlight GitGutterDelete ctermfg=red ctermbg=235
highlight GitGutterChangeDelete ctermfg=lightblue ctermbg=235
" Highlight line color.
highlight CursorLine ctermbg=235
highlight CursorLineNR ctermbg=NONE ctermfg=white

" Disable Arrow keys
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
"
" Markdown stuff
let g:vim_markdown_folding_disabled=1
let g:vim_markdown_frontmatter=1
let g:marked_app = "Marked"

" Set sign column to always be open.
set signcolumn=yes

" Enable powerline special fonts.
let g:airline_powerline_fonts = 1

" Turn on Vim Airline tabs.
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme = 'bubblegum'

" Send d and c to the blackhole.
nnoremap d "_d
vnoremap d "_d

" Shift+tab for command mode.
nmap <S-Tab> <<
" Shift+tab for insert mode.
imap <S-Tab> <Esc><<i
" Shift+tab for visual mode.
vmap <S-Tab> <<
" Wrap gitcommit file types at the appropriate length
filetype indent plugin on

"" Make Drupal file types have php syntax.
if has("autocmd")
  " Drupal *.module and *.install files.
  augroup module
    autocmd BufRead,BufNewFile *.module set filetype=php
    autocmd BufRead,BufNewFile *.install set filetype=php
    autocmd BufRead,BufNewFile *.test set filetype=php
    autocmd BufRead,BufNewFile *.inc set filetype=php
    autocmd BufRead,BufNewFile *.profile set filetype=php
    autocmd BufRead,BufNewFile *.view set filetype=php
  augroup END
endif

" Markdown specific stuff.
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
autocmd Filetype markdown call SetMarkdownOptions()
function SetMarkdownOptions()
  " Enable spellcheck.
  set spell spelllang=en_us
  " Wrap text (without linebreak charecters)
  " I don't want to highlight the current line.
  highlight CursorLine ctermbg=NONE
endfunction

" Remove trailing whitespace on save.
autocmd BufWritePre * :%s/\s\+$//e

" Better relative line numbers
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc

nnoremap <C-n> :call NumberToggle()<cr>

function! s:TaskpaperSetup()
  " Your settings
  autocmd BufLeave,FocusLost * silent! wall
endfunction

augroup vimrc-taskpaper
autocmd!
  autocmd FileType taskpaper call s:taskpaper_setup()
augroup END

let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
nnoremap <C-w>E :SyntasticCheck<CR> :SyntasticToggleMode<CR>

" Force saving files that require root permission
cnoremap w!! w !sudo tee > /dev/null %

" Wrap visual selection in an HTML tag.
vmap <Leader>t <Esc>:call VisualHTMLTagWrap()<CR>
function! VisualHTMLTagWrap()
  let tag = input("Tag to wrap block: ")
  if len(tag) > 0
    normal `>
    if &selection == 'exclusive'
      exe "normal i</".tag.">"
    else
      exe "normal a</".tag.">"
    endif
    normal `<
    exe "normal i<".tag.">"
    normal `<
  endif
endfunction

let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\'
